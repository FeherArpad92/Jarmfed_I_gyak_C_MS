
gyak3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d3  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007be  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	18 d0       	rcall	.+48     	; 0xda <main>
  aa:	a8 c0       	rjmp	.+336    	; 0x1fc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = (1<<PA3) | (1<<PA2) | (1<<PA1) | (1<<PA0);
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PA3) | (1<<PA2) | (1<<PA1) | (1<<PA0);
  b2:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = (0<<PB0) | (0<<PB1);
  b4:	17 ba       	out	0x17, r1	; 23
	PORTB = (1<<PB0) | (1<<PB1);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	08 95       	ret

000000bc <timer_init>:
* Output:
* Notes:
******************************************************************************/
void timer_init(void)
{
	TCCR0 = (0<<WGM00) | (1<<WGM01) | (1<<CS02) | (1<<CS01) | (1<<CS00);
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	83 bf       	out	0x33, r24	; 51
	OCR0 = 77;
  c0:	8d e4       	ldi	r24, 0x4D	; 77
  c2:	81 bf       	out	0x31, r24	; 49
  c4:	08 95       	ret

000000c6 <check_timer_compare>:
* Output:			1, ha a timer jelez, 0 ha nem
* Notes:
******************************************************************************/
uint8_t check_timer_compare(void)
{
	if((TIFR & (1<<OCF0)) == (1<<OCF0))
  c6:	96 b7       	in	r25, 0x36	; 54
  c8:	89 2f       	mov	r24, r25
  ca:	82 70       	andi	r24, 0x02	; 2
  cc:	91 ff       	sbrs	r25, 1
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <check_timer_compare+0x12>
	{
		TIFR = TIFR | (1<<OCF0);
  d0:	86 b7       	in	r24, 0x36	; 54
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	86 bf       	out	0x36, r24	; 54
		return 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
  d8:	08 95       	ret

000000da <main>:
* Output:           
* Notes:            
******************************************************************************/
int main(void)
{
	port_init();
  da:	e9 df       	rcall	.-46     	; 0xae <port_init>
	timer_init();
  dc:	ef df       	rcall	.-34     	; 0xbc <timer_init>
	
	//Végtelen ciklus
	while(1)
	{
		if(check_timer_compare())
  de:	f3 df       	rcall	.-26     	; 0xc6 <check_timer_compare>
  e0:	88 23       	and	r24, r24
  e2:	09 f4       	brne	.+2      	; 0xe6 <main+0xc>
  e4:	52 c0       	rjmp	.+164    	; 0x18a <main+0xb0>
  e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <timer_cnt>
		{
			timer_cnt++;
  ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <timer_cnt+0x1>
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <timer_cnt+0x1>
  f6:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <timer_cnt>
  fa:	81 e0       	ldi	r24, 0x01	; 1
			if((timer_cnt % 1) == 0) timer_task_10ms=1;
  fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer_task_10ms>
 100:	9a 01       	movw	r18, r20
			if((timer_cnt % 10) == 0) timer_task_100ms=1;
 102:	ad ec       	ldi	r26, 0xCD	; 205
 104:	bc ec       	ldi	r27, 0xCC	; 204
 106:	6b d0       	rcall	.+214    	; 0x1de <__umulhisi3>
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	9c 01       	movw	r18, r24
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	82 0f       	add	r24, r18
 128:	93 1f       	adc	r25, r19
 12a:	48 17       	cp	r20, r24
 12c:	59 07       	cpc	r21, r25
 12e:	19 f4       	brne	.+6      	; 0x136 <main+0x5c>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer_task_100ms>
 136:	9a 01       	movw	r18, r20
			if((timer_cnt % 50) == 0) timer_task_500ms=1;
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	ab e7       	ldi	r26, 0x7B	; 123
 13e:	b4 e1       	ldi	r27, 0x14	; 20
 140:	4e d0       	rcall	.+156    	; 0x1de <__umulhisi3>
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	62 e3       	ldi	r22, 0x32	; 50
 148:	68 9f       	mul	r22, r24
 14a:	90 01       	movw	r18, r0
 14c:	69 9f       	mul	r22, r25
 14e:	30 0d       	add	r19, r0
 150:	11 24       	eor	r1, r1
 152:	42 17       	cp	r20, r18
 154:	53 07       	cpc	r21, r19
 156:	19 f4       	brne	.+6      	; 0x15e <main+0x84>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer_task_500ms>
 15e:	9a 01       	movw	r18, r20
			if((timer_cnt % 100) == 0) timer_task_1s=1;
 160:	36 95       	lsr	r19
 162:	27 95       	ror	r18
 164:	36 95       	lsr	r19
 166:	27 95       	ror	r18
 168:	ab e7       	ldi	r26, 0x7B	; 123
 16a:	b4 e1       	ldi	r27, 0x14	; 20
 16c:	38 d0       	rcall	.+112    	; 0x1de <__umulhisi3>
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	68 9f       	mul	r22, r24
 176:	90 01       	movw	r18, r0
 178:	69 9f       	mul	r22, r25
 17a:	30 0d       	add	r19, r0
 17c:	11 24       	eor	r1, r1
 17e:	42 17       	cp	r20, r18
 180:	53 07       	cpc	r21, r19
 182:	19 f4       	brne	.+6      	; 0x18a <main+0xb0>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_task_10ms>
			
			//PORTA = PORTA ^ (1<<PA0);
		}
		
		if(timer_task_10ms)
 18e:	88 23       	and	r24, r24
 190:	31 f0       	breq	.+12     	; 0x19e <main+0xc4>
 192:	9b b3       	in	r25, 0x1b	; 27
		{
			PORTA ^= (1<<PA0);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	89 27       	eor	r24, r25
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer_task_10ms>
			timer_task_10ms =0;
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer_task_100ms>
		}
		
		if(timer_task_100ms)
 1a2:	88 23       	and	r24, r24
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <main+0xd8>
 1a6:	9b b3       	in	r25, 0x1b	; 27
		{
			PORTA ^= (1<<PA1);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	89 27       	eor	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer_task_100ms>
			timer_task_100ms =0;
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer_task_500ms>
		}
		
		if(timer_task_500ms)
 1b6:	88 23       	and	r24, r24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <main+0xec>
 1ba:	9b b3       	in	r25, 0x1b	; 27
		{
			PORTA ^= (1<<PA2);
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	89 27       	eor	r24, r25
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timer_task_500ms>
			timer_task_500ms=0;
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(timer_task_1s)
 1ca:	88 23       	and	r24, r24
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <main+0xf6>
 1ce:	87 cf       	rjmp	.-242    	; 0xde <main+0x4>
 1d0:	9b b3       	in	r25, 0x1b	; 27
		{
			PORTA ^= (1<<PA3);
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	89 27       	eor	r24, r25
 1d6:	8b bb       	out	0x1b, r24	; 27
 1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			timer_task_1s=0;
 1dc:	80 cf       	rjmp	.-256    	; 0xde <main+0x4>

000001de <__umulhisi3>:
 1de:	a2 9f       	mul	r26, r18
 1e0:	b0 01       	movw	r22, r0
 1e2:	b3 9f       	mul	r27, r19
 1e4:	c0 01       	movw	r24, r0
 1e6:	a3 9f       	mul	r26, r19
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	b2 9f       	mul	r27, r18
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
